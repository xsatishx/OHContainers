apiVersion: v1
data:
  release: 
kind: Secret
metadata:
  creationTimestamp: "2021-03-11T07:18:07Z"
  labels:
    modifiedAt: "1615447087"
    name: kube-backups
    owner: helm
    status: deployed
    version: "1"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:release: {}
      f:metadata:
        f:labels:
          .: {}
          f:modifiedAt: {}
          f:name: {}
          f:owner: {}
          f:status: {}
          f:version: {}
      f:type: {}
    manager: helm
    operation: Update
    time: "2021-03-11T07:18:07Z"
  name: sh.helm.release.v1.kube-backups.v1
  namespace: default
type: helm.sh/release.v1
